<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.dstz.agilebpm</groupId>
        <artifactId>agile-bpm</artifactId>
        <version>1.1.5</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <artifactId>bpm</artifactId>
    <packaging>pom</packaging>
    <name>【流程模块】</name>
    <description>构建bpm</description>

    <modules>
        <module>form</module>
        <module>bus</module>
        <module>wf</module>
    </modules>

    <repositories>
        <repository>
            <id>nexus-agile-bpm</id>
            <url>http://47.94.249.185:8081/nexus/content/groups/public/</url>
        </repository>
    </repositories>

    <pluginRepositories>
        <pluginRepository>
            <id>nexus-agile-bpm</id>
            <url>http://47.94.249.185:8081/nexus/content/groups/public/</url>
        </pluginRepository>
    </pluginRepositories>


    <properties>
        <base.version>1.1.5</base.version>
        <platform.version>1.1.5</platform.version>
        <bpm.version>1.1.5</bpm.version>
    </properties>

    <dependencyManagement>

        <dependencies>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>bus-api</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>bus-core</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>bus-rest</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>form-api</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>form-core</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>form-rest</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>wf-api</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>wf-core</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>wf-act</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>wf-rest</artifactId>
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>wf-plugin</artifactId>
                <classifier>pg</classifier> 
                <version>${bpm.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>auth</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>oauth2</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>org-api</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>org-adaptor</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>org-core</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>sys-api</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>sys-core</artifactId>
                <version>${platform.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>sys-rest</artifactId>
                <version>${platform.version}</version>
            </dependency>


            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>base-api</artifactId>
                <version>${base.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>base-core</artifactId>
                <version>${base.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>base-db</artifactId>
                <version>${base.version}</version>
            </dependency>

            <dependency>
                <groupId>com.dstz.agilebpm</groupId>
                <artifactId>base-rest</artifactId>
                <version>${base.version}</version>
            </dependency>
        </dependencies>

    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
        </plugins>
        <pluginManagement>
        		<plugins>
        			<plugin>
		                <groupId>com.github.wvengen</groupId>
		                <artifactId>proguard-maven-plugin</artifactId>
		                <version>2.0.11</version>
		                <executions>
		                    <execution>
		                        <phase>package</phase>
		                        <goals>
		                            <goal>proguard</goal>
		                        </goals>
		                    </execution>
		                </executions>
		                <configuration>
		                    <!-- 是否将生成的PG文件安装部署-->
		                    <attach>true</attach>
		                    <!-- 是否混淆-->
		                    <obfuscate>true</obfuscate>
		                    <!-- 指定生成文件分类 -->
		                    <attachArtifactClassifier>pg</attachArtifactClassifier>
		                    <options>
		                        <!-- JDK目标版本1.7-->
		                        <option>-target 1.8</option>
		                        <!-- 不做收缩（删除注释、未被引用代码）-->
		                        <option>-dontshrink</option>
		                        <!-- 不做优化（变更代码实现逻辑）-->
		                        <option>-dontoptimize</option>
		                        <option>-keepdirectories</option>
		                        <!-- 不路过非公用类文件及成员-->
		                        <option>-dontskipnonpubliclibraryclasses</option>
		                        <option>-dontskipnonpubliclibraryclassmembers</option>
		                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
		                        <option>-allowaccessmodification</option>
		                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
		                        <option>-useuniqueclassmembernames</option>
		                        <!-- 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名-->
		                        <option>-keeppackagenames</option>
		                        <!-- 不混淆所有特殊的类-->
		                        <option>-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod</option>
		                        <!-- 不混淆所有的set/get方法 -->
		                        <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>
		                        
		                        <!-- 不混淆所有的接口-->
		                        <option>-keep interface **.*{ *;}</option>
								<!-- 算了所有类都不改名字-->
								<option>-keep class **.* </option>
		                        
		                        
		                        <!-- 不混淆所有枚举，序列化类-->
		                        <option>-keep enum **.*{ *;}</option>
		                        <!-- 		序列化类 <option>-keep public class * implements java.io.Serializable{public protected private *;}</option> -->
		
		                        <!-- 不混淆job包下的所有类名，且类中的方法也不混淆-->
		                        <option>-keep class com.dstz.**.job.** { &lt;methods&gt;; }</option>
		                        
		                        <!-- 抽象类的方法、与子类不同包，保持可用-->
		                        <option>-keep class com.dstz.bpm.engine.plugin.context.* { &lt;methods&gt;; }</option>
		                        <option>-keepclasseswithmembernames class com.dstz.bpm.engine.plugin.runtime.abstact.* { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.bpm.engine.plugin.session.* { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.bpm.engine.plugin.factory.* { &lt;methods&gt;; }</option>
		                        <option>-keep class com.dstz.bus.util.* { &lt;methods&gt;; }</option>
		                        
		                        
		                        <!-- Dao 层与mapper对应。这里不混淆-->
		                        <option>-keep class com.dstz.*.*.dao.**</option>
		                        
		                        <option>-keep class com.dstz.**.ActivitiDefCache { &lt;methods&gt;; }</option>
		                    </options>
		                    <outjar>${project.build.finalName}-pg.jar</outjar>
		                    <!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
		                    <libs>
		                        <lib>${java.home}/lib/rt.jar</lib>
		                        <lib>${java.home}/lib/jsse.jar</lib>
		                    </libs>
		                    <!-- 加载文件的过滤器
		                    <inFilter>\*</inFilter>-->
		                    <!-- 要处理的jar-->
		                    
		                    <injar>${project.build.finalName}.jar</injar>
		                    <outjar>${project.build.finalName}-small.jar</outjar>
		                    <!-- 输出目录-->
		                    <outputDirectory>${project.build.directory}</outputDirectory>
		                </configuration>
		                <dependencies>
		                	<dependency>
		                        <groupId>net.sf.proguard</groupId>
		                        <artifactId>proguard-base</artifactId>
		                        <version>5.3.3</version>
		                    </dependency>
		                </dependencies>
		            </plugin>
        		</plugins>
        	
        	</pluginManagement>
    </build>
</project>